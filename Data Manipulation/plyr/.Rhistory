?cast
?reshape2
args3 <-  as.array(args2)
a1 <- maply(args1,rnorm, n=10)
a1
length(args1[[1]])
length(l1[[1]])
length(l1)
dim(a1)
dim(a1)
?expand.grid
?daply
daply(args,.("n","mean","sd"), function(x) x)
aaa <- daply(args,.("n","mean","sd"), function(x) x)
aaa <- daply(args2,.("n","mean","sd"), function(x) x)
aaa <- daply(args2,.("n","mean"), function(x) x)
aaa <- daply(args2,.("n","mean"), function(x) x)
daply(args2,.("n","mean"), function(x) x)
aaa <- daply(args2,.("n"), function(x) x)
aaa <- daply(args2,.("n"), function(x) x)
aaa <- daply(args2,.("n"), function(x) as.array(x))
aaa <- daply(args2,.("n"), function(x) print(x))
elply <- function(vars, fun, ..., .progress="none", .parallel=FALSE) {
df <- do.call("expand.grid",vars)
if (all(names(vars) %in% names(formals(fun))))  {
#We assume that fun takes the variables in vars as named arguments
funt <- function(v,...)    {
do.call(fun,c(v,list(...)))
}
res <- alply(df,1,funt,...,.progress=.progress,.parallel=.parallel)
}
else  {
#We assume that fun takes a named list as first argument
res <- alply(df,1,fun,...,.progress=.progress,.parallel=.parallel)
}
res
}
edply <- function(...){
res <- elply(...)
plyr:::list_to_dataframe(res,attr(res, "split_labels"))
}
# Examples
fun <- function(x, freq,phase) {
data.frame( x=x, value=sin(freq*x-phase))
}
x <- seq(0,2*pi,l=100);
d <- edply(list(freq=c(1,2,4,8),phase=c(0,1)),fun, x=x)
ggplot(d,aes(x,value,col=as.factor(phase)))+facet_wrap( ~ freq)+geom_path()
x <- seq(0,2*pi,l=100);
d <- edply(list(freq=c(1,2,4,8),phase=c(0,1)),fun, x=x)
ggplot2(d,aes(x,value,col=as.factor(phase)))+facet_wrap( ~ freq)+geom_path()
library(ggplot2)
x <- seq(0,2*pi,l=100);
fun <- function(x, freq,phase) {
data.frame( x=x, value=sin(freq*x-phase))
}
d <- edply(list(freq=c(1,2,4,8),phase=c(0,1)),fun, x=x)
ggplot2(d,aes(x,value,col=as.factor(phase)))+facet_wrap( ~ freq)+geom_path()
ggplot(d,aes(x,value,col=as.factor(phase)))+facet_wrap( ~ freq)+geom_path()
ggplot(d,aes(x,y))+geom_raster(aes(fill=V1))
fun <- function(x,y) dnorm(x)*dnorm(y)*sin(x)
d <- edply(list(x=seq(-3,3,l=40),y=seq(-3,3,l=40)),fun)
ggplot(d,aes(x,y))+geom_raster(aes(fill=V1))
?outer
aaaa <- outer(cbind(expand.grid(n=seq(10,20,2),mean = 1:5)), 1:5)
?ave
a1 <- maply(args1,rnorm, n=10)
a1
mdply(cbind(mean = 1:5, sd = 1:5), as.data.frame(rnorm), n = 5)
mdply(args1, rnorm, n = 2)
?mdply
mdply(cbind(mean = 1:5, sd = 1:5), list(nrorm, rnorm), n = 5)
mdply(cbind(mean = 1:5, sd = 1:5), list(rnorm, rnorm), n = 5)
as.data.frame(rnorm)
cbind(args1, as.data.frame(rnorm)
sims <- cbind(args1, as.data.frame(rnorm))
?raply
?rlply
?rdply
?r_ply
r_ply(10, plot(runif(50)))
df <- data.frame(x=rnorm(100), y=rnorm(100))
mods <- rlply(100, lm(y ~ x, data=df))
?rlply
hist(laply(mods, function(x) summary(x)$r.squared))
hist(laply(mods, function(x) summary(x)$r.squared))
expr <- expression(lm(y ~ x, data=data.frame(x=rnorm(100), y=rnorm(100))
mods <- rlply(100, lm(y ~ x, data=data.frame(x=rnorm(100), y=rnorm(100)))
hist(laply(mods, function(x) summary(x)$r.squared))
raply(100, mean(runif(100)))
raply(100, each(mean, var)(runif(100)))
raply(10, runif(4))
raply(10, matrix(runif(4), nrow=2))
# See the central limit theorem in action
hist(raply(1000, mean(rexp(10))))
hist(raply(1000, mean(rexp(100))))
hist(raply(1000, mean(rexp(1000))))
rdply(.n, .expr, .progress = "none", .id = NA)
rdply(20, mean(runif(100)))
rdply(20, each(mean, var)(runif(100)))
rdply(20, data.frame(x = runif(2)))
###########
# splat() #
###########
# Converts a function that takes multiple arguments to one that take a single list
hp_per_cyl <- function(hp, cyl, ...) hp / cyl
hp_per_cyl_d <- function(hp, cyl, ...) data.frame(hp_per_cyl = hp / cyl)
splat(hp_per_cyl)(mtcars[1,])
splat(hp_per_cyl)(mtcars)
splat(hp_per_cyl_d)(mtcars)
dlply(mtcars, .(round(wt)),function(df) hp_per_cyl(df$hp, df$cyl))
dlply(mtcars, .(round(wt)), splat(hp_per_cyl))
dlply(mtcars, .(round(wt)), splat(hp_per_cyl_d))
ddply(mtcars, .(round(wt)),function(df) mean(hp_per_cyl(df$hp, df$cyl)))
ddply(mtcars, .(round(wt)),function(df) colwise(mean)(hp_per_cyl_d(df$hp, df$cyl)))
##########
# each() #
##########
Combine multiple functions into a single function returning a named vector of outputs
You cannot supply additional parameters for the summary functions
Need to create previous function ...
each(min,max)
function(x) c(min=min(x), max=max(x))
# Call min() and max() on the vector 1:10
each(min, max)(1:10)
# This syntax looks a little different.  It is shorthand for the
# the following:
f<- each(min, max)
f(1:10)
# Three equivalent ways to call min() and max() on the vector 1:10
each("min", "max")(1:10)
each(c("min", "max"))(1:10)
each(c(min, max))(1:10)
# Call length(), min() and max() on a random normal vector
each(length, mean, var)(rnorm(100))
#############
# colwise() #
#############
# converts a function that works on vectors, to one that operates column-wise on a data frame, returning a data frame.
# - .if = is.factor
# - .if = is.numeric
calcolwise
numcolwise   # only on numeric variables
catcolwise() # only on categorical variables
##############
# failwith() #
##############
# Modify a function so that it returns a default value when there is an error
failwith(NA, f) # Return an NA whenever f throws an error.
############################
# as.data.frame.function() #
############################
# Coerces the output of the processing function to data.frame
################
# summarise()  #
################
# Returns the modified/new columns in a new data frame
# Very useful for creating group-wise summaries
abind
mutate()
#############
## reshape2 #
#############
dcast
acast
melt
recast
colsplit
add_marging
# Convert data.frame to array ...#
data<-data.frame(coord.name=rep(1:10, 2),
x=rnorm(20),
y=rnorm(20),
ID=rep(c("A","B"), each=10))
data.array<-array(dim=c(10, 2, length(unique(data$ID))))
for(i in 1:length(unique(data$ID))){
data.array[,1,i]<-data[data$ID==unique(data$ID)[i],"x"]
data.array[,2,i]<-data[data$ID==unique(data$ID)[i],"y"]
}
# Use this or some other method to add a column of row indices.
data$row <- with(data, ave(ID==ID, ID, FUN = cumsum))
m <- melt(data, id.vars = c("row", "ID"))
a <- acast(m, row ~ variable ~ ID)
df <- month_coefs_df
# Randomize value in a column within  a data frame
# - Useful for performing block bootstrapping
ddply(df, .(lat, long), transform, time = sample(time))
# Scaling variables within each group
ddply(df, .(lat, long), transform, value = scale(value))
# Group-wise summaries, subsetting
ddply(month_coefs_df, .(lat, long), summarise,
ozone_min = min(value), ozone_max = max(ozone))$
Group-wise subsetting is easy with subset(). For example, if we wanted to extract the
observation in each group with the lowest value ozone of ozone, it is just as easy:
ddply(month_coefs_df, .(lat, long), subset, value == min(value))
For simulations, mdply() can be very useful, because it is easy to generate a grid of parameter values and then evaluate them. This can also be useful when testing many possible
combinations to input to a function.
mdply(expand.grid(mean = 1:5, sd = 1:5), as.data.frame(rnorm), n = 10)
expr <- expression(lm(y ~ x, data=data.frame(x=rnorm(100), y=rnorm(100))))
expr
mods <- rlply(100, expr)
expr = quote(lm(y ~ x, data=data.frame(x=rnorm(100), y=rnorm(100))))
expr
mods <- rlply(100, lm(y ~ x, data=data.frame(x=rnorm(100), y=rnorm(100)))
hist(laply(mods, function(x) summary(x)$r.squared))
raply(100, mean(runif(100)))
raply(100, each(mean, var)(runif(100)))
raply(10, runif(4))
raply(10, matrix(runif(4), nrow=2))
# See the central limit theorem in action
hist(raply(1000, mean(rexp(10))))
hist(raply(1000, mean(rexp(100))))
hist(raply(1000, mean(rexp(1000))))
rdply(.n, .expr, .progress = "none", .id = NA)
rdply(20, mean(runif(100)))
rdply(20, each(mean, var)(runif(100)))
rdply(20, data.frame(x = runif(2)))
###########
# splat() #
###########
# Converts a function that takes multiple arguments to one that take a single list
hp_per_cyl <- function(hp, cyl, ...) hp / cyl
hp_per_cyl_d <- function(hp, cyl, ...) data.frame(hp_per_cyl = hp / cyl)
splat(hp_per_cyl)(mtcars[1,])
splat(hp_per_cyl)(mtcars)
splat(hp_per_cyl_d)(mtcars)
dlply(mtcars, .(round(wt)),function(df) hp_per_cyl(df$hp, df$cyl))
dlply(mtcars, .(round(wt)), splat(hp_per_cyl))
dlply(mtcars, .(round(wt)), splat(hp_per_cyl_d))
ddply(mtcars, .(round(wt)),function(df) mean(hp_per_cyl(df$hp, df$cyl)))
ddply(mtcars, .(round(wt)),function(df) colwise(mean)(hp_per_cyl_d(df$hp, df$cyl)))
##########
# each() #
##########
Combine multiple functions into a single function returning a named vector of outputs
You cannot supply additional parameters for the summary functions
Need to create previous function ...
each(min,max)
function(x) c(min=min(x), max=max(x))
# Call min() and max() on the vector 1:10
each(min, max)(1:10)
# This syntax looks a little different.  It is shorthand for the
# the following:
f<- each(min, max)
f(1:10)
# Three equivalent ways to call min() and max() on the vector 1:10
each("min", "max")(1:10)
each(c("min", "max"))(1:10)
each(c(min, max))(1:10)
# Call length(), min() and max() on a random normal vector
each(length, mean, var)(rnorm(100))
#############
# colwise() #
#############
# converts a function that works on vectors, to one that operates column-wise on a data frame, returning a data frame.
# - .if = is.factor
# - .if = is.numeric
calcolwise
numcolwise   # only on numeric variables
catcolwise() # only on categorical variables
##############
# failwith() #
##############
# Modify a function so that it returns a default value when there is an error
failwith(NA, f) # Return an NA whenever f throws an error.
############################
# as.data.frame.function() #
############################
# Coerces the output of the processing function to data.frame
################
# summarise()  #
################
# Returns the modified/new columns in a new data frame
# Very useful for creating group-wise summaries
abind
mutate()
#############
## reshape2 #
#############
dcast
acast
melt
recast
colsplit
add_marging
# Convert data.frame to array ...#
data<-data.frame(coord.name=rep(1:10, 2),
x=rnorm(20),
y=rnorm(20),
ID=rep(c("A","B"), each=10))
data.array<-array(dim=c(10, 2, length(unique(data$ID))))
for(i in 1:length(unique(data$ID))){
data.array[,1,i]<-data[data$ID==unique(data$ID)[i],"x"]
data.array[,2,i]<-data[data$ID==unique(data$ID)[i],"y"]
}
# Use this or some other method to add a column of row indices.
data$row <- with(data, ave(ID==ID, ID, FUN = cumsum))
m <- melt(data, id.vars = c("row", "ID"))
a <- acast(m, row ~ variable ~ ID)
df <- month_coefs_df
# Randomize value in a column within  a data frame
# - Useful for performing block bootstrapping
ddply(df, .(lat, long), transform, time = sample(time))
# Scaling variables within each group
ddply(df, .(lat, long), transform, value = scale(value))
# Group-wise summaries, subsetting
ddply(month_coefs_df, .(lat, long), summarise,
ozone_min = min(value), ozone_max = max(ozone))$
Group-wise subsetting is easy with subset(). For example, if we wanted to extract the
observation in each group with the lowest value ozone of ozone, it is just as easy:
ddply(month_coefs_df, .(lat, long), subset, value == min(value))
For simulations, mdply() can be very useful, because it is easy to generate a grid of parameter values and then evaluate them. This can also be useful when testing many possible
combinations to input to a function.
mdply(expand.grid(mean = 1:5, sd = 1:5), as.data.frame(rnorm), n = 10)
mods <- rlply(100, lm(y ~ x, data=data.frame(x=rnorm(100), y=rnorm(100))))
mods <- rlply(100, expr)
mods <- rlply(100, eval(expr))
expr <- quote(lm(y ~ x, data=data.frame(x=rnorm(100), y=rnorm(100))))
mods <- rlply(100, eval(expr))
eval(expr)
hist(laply(mods, function(x) summary(x)$r.squared))
raply(100, each(mean, var)(runif(100)))
hist(raply(1000, mean(rexp(10))))
hist(raply(1000, mean(rexp(100))))
hist(raply(1000, mean(rexp(1000))))
hist(raply(1000, mean(rexp(5))))
hist(raply(1000, mean(rexp(100))))
hist(raply(1000, mean(rexp(1000))))
raply(10, matrix(runif(4), nrow=2))
raply(10, runif(4))
raply(100, each(mean=mean, var=var)(runif(100)))
raply(100, each(mean=mean, var=var)(runif(100)))
raply(10, runif(4))
raply(10, sim=runif(4))
raply(10, matrix(runif(4), nrow=2))
matrix(runif(4), nrow=2)
raply(10, runif(4))
raply(100, mean(runif(100)))
raply(100, each(mean=mean, var=var)(runif(100)))
raply(10, matrix(runif(4), nrow=2))
set.seed(1)
raply(10, matrix(runif(4), nrow=2))
set.seed(1)
matrix(runif(4), nrow=2)
raply(10, matrix(runif(10), nrow=2,ncol=5))# dim(n) x
a <- raply(10, matrix(runif(10), nrow=2,ncol=5))
?rdply
?raply
raply
rdply(20, mean(runif(100)))
rdply(20, each(mean, var)(runif(100)))
rdply(20, data.frame(x = runif(2)))
rdply(20, each(mean, var)(runif(100)))
library(plyr)
library(mply)
df <- melt(ozone)
df <- melt(ozone)
# Randomize value in a column within  a data frame
# Modify values in a dataframe based on groups
ddply(df, .(lat, long), transform, time = sample(time))
# Scaling variables within each group
ddply(df, .(lat, long), transform, value = scale(value))
# Group-wise summaries
ddply(month_coefs_df, .(lat, long), summarise, ozone_min = min(value), ozone_max = max(ozone))
# Group-wise subsetting
ddply(month_coefs_df, .(lat, long), subset, value == min(value))
df <- melt(ozone)
# Randomize value in a column within  a data frame
# Modify values in a dataframe based on groups
ddply(df, .(lat, long), transform, time = sample(time))
# Scaling variables within each group
ddply(df, .(lat, long), transform, value = scale(value))
# Group-wise summaries
ddply(df, .(lat, long), summarise, ozone_min = min(value), ozone_max = max(ozone))
# Group-wise subsetting
ddply(df, .(lat, long), subset, value == min(value))
?mutate
?summarise
ddply(df, .(lat, long), summarise, ozone_min = min(value), ozone_max = max(ozone))
ddply(df, .(lat, long), mutate, ozone_min = min(value), ozone_max = max(ozone))
?mutate
?transform
# mutate is rather faster than transform
system.time(transform(baseball, avg_ab = ab / g))
system.time(mutate(baseball, avg_ab = ab / g))
?abind
?as.data.frame.function
?failwith
splat
?splat
ddply(mtcars, .(round(wt)),function(df) colwise(mean)(hp_per_cyl_d(df$hp, df$cyl)))
ddply(mtcars, .(round(wt)),  colwise(mean)(splat(hp_per_cyl_d)))
dlply(mtcars, .(round(wt)), splat(hp_per_cyl_d))
ddply(mtcars, .(round(wt)),function(df) colwise(mean)(hp_per_cyl_d(df$hp, df$cyl)))
dlply(mtcars, .(round(wt)), splat(hp_per_cyl_d))
splat(hp_per_cyl_d)(mtcars)
dlply(mtcars, .(round(wt)), splat(hp_per_cyl_d))
ddply(mtcars, .(round(wt)), splat(hp_per_cyl_d))
ddply(mtcars, .(round(wt)), splat(hp_per_cyl))
ddply(mtcars, .(round(wt)), splat(hp_per_cyl_d))
=colwise
?colwise
# Apply to every column in a data frame
colwise(nmissing)(baseball)
# Count number of missing values
nmissing <- function(x) sum(is.na(x))
colwise(nmissing)(baseball)
# This is particularly useful in conjunction with d*ply
ddply(baseball, .(year), colwise(nmissing))
# This is particularly useful in conjunction with d*ply
ddply(baseball, .(year), colwise(nmissing))
ddply(baseball, .(year), colwise(nmissing, c("sb", "cs", "so")))
ddply(baseball, .(year), colwise(nmissing, is.character))
ddply(baseball, .(year), colwise(nmissing, is.numeric))
ddply(baseball, .(year), colwise(nmissing, is.discrete))
numcolwise(mean)(baseball, na.rm = TRUE)
numcolwise(mean, na.rm = TRUE)(baseball)
each(min,max)
?each
# Call length(), min() and max() on a random normal vector
each(length, mean, var)(rnorm(100))
?summarise
summarise(baseball, duration = max(year) - min(year),
nteams = length(unique(team)))
ddply(baseball, "id", summarise, duration = max(year) - min(year),
nteams = length(unique(team)))
# Returns the modified/new columns in a new data frame
summarise(baseball, duration = max(year) - min(year),
nteams = length(unique(team)))
?mutate
mutate(airquality, Ozone = -Ozone)
mutate(airquality, Temp = (Temp - 32) / 1.8, OzT = Ozone / Temp)
airquality
mutate(airquality, Ozone = -Ozone)
mutate(airquality, new = -Ozone, Temp = (Temp - 32) / 1.8)
# Things transform can't do
mutate(airquality, Temp = (Temp - 32) / 1.8, OzT = Ozone / Temp)
?transform
transform(airquality, Temp = (Temp - 32) / 1.8, OzT = Ozone / Temp)
transform(airquality, Temp = (Temp - 32) / 1.8, OzT = Ozone / Temp)
?as.data.frame.functions
?as.data.frame.function
c(1,2,3)
data.frame(1,2,3)
dim(data.frame(1,2,3))
?as.quoted
?is.quoted
?quoted
.(a, b, c)
class(.(a, b, c))
`.`
.(a, b, c)
.(first = a, second = b, third = c)
.(a ^ 2, b - d, log(c))
as.quoted(~ a + b + c)
as.quoted(a ~ b + c)
as.quoted(c("a", "b", "c"))
as.quoted(~ a + b + c)
.(a, b, c)
.(first = a, second = b, third = c)
.(a ^ 2, b - d, log(c))
?as.quoted
?as.quoted.character
as.quoted.character(as.quoted(~ a + b + c))
class(c("a", "b", "c"))
.(a + b + c)
as.quoted(c(first="a", second="b", third="c"))
?is.quoted
is.quoted(.(a, b, c))
quote(a)
d <- quote(a)
d <- expression(a)
str(d)
d <- substitute(a)
d <- substitute(a , b)
b=2
d <- substitute(a + b)
str(d)
d
eval(d)
a
a=1
b=2
d <- substitute(a + b)
eval(d)
d <-  .(a+b)
d
eval(d)
?arrange
?count
?strip_splits
?revalue
?aggregate
?join
mtcars[with(mtcars, order(cyl, disp)), ]
arrange(mtcars, cyl, disp)
?rownames
?arrange
?arrange
arrange
?ccount
?count
count(baseball[1:100,], vars = "id")
count(baseball[1:100,], vars = "id", wt_var = "g")
count(baseball, "id", "ab")
count(baseball, "lg")
count(baseball, "stint")
count(baseball[1:100,], c("id", "year"))
# Count of counts
count(count(baseball[1:100,], c("id", "year")), "id", "freq")
count(count(baseball, c("id", "year")), "freq")
count(baseball[1:100,], c("id", "year"))
